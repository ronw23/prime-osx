# to build a multi-user version, make clean and then make game-multiuser

OBJS = AttackType.o BOFH.o BunkerRooms.o Canister.o Cave.o Creature.o Droid.o\
Equipment.o Fight.o FloppyDisk.o Game.o Help.o Hero.o Implant.o Interface.o  \
Inventory.o Lore.o LoreHelp.o Mainframe.o MatterCompiler.o Map.o Menu.o      \
Monster.o MonsterAI.o Mutant.o NCMenu.o NCUI.o Object.o ObjectParser.o       \
OperatingSystem.o Options.o Path.o Profession.o RayGun.o Room.o SaveLoad.o   \
Services.o Sewer.o Shop.o Skills.o SpecialLevel.o Tombstone.o Tool.o         \
TwistyRooms.o Util.o Vat.o Vision.o Weapon.o Wreck.o main.o
NEOBJS = NEMenu.o NEUI.o
GENFILES = Attack.cpp Attack.h Flavor.cpp Flavor.h MonsterIlk.cpp MonsterIlk.h\
ObjectIlk.cpp ObjectIlk.h

PROGRAM=prime

GAMEOWNER=root:games
PREFIX=
BINDIR=$(PREFIX)/usr/games/bin
MANDIR=$(PREFIX)/usr/share/man/man6
DATADIR=$(PREFIX)/usr/games/share/$(PROGRAM)
USERDIR=~/.config/$(PROGRAM)
SCOREDIR=$(PREFIX)/var/games/$(PROGRAM)

# It is safe to leave this flag blank.
# The only case it should be set is if you are cross-compiling for mac os x.
#
# If set, and if you have the libraries to compile against, this will build 
# a binary that should work on 32/64 bit intel-only mac osx leopard and later.
#
#OSXFLAGS=-arch i386 -mmacosx-version-min=10.5
OSXFLAGS=

#LDFLAGS=$(LDPATH) $(OSXFLAGS)
LIBS=-lpanel -lcurses
NELIBS=-lpanel -lcurses -lnoteye -lz -llua
LDFLAGS=$(LDPATH) $(OSXFLAGS)
NELDFLAGS=-L. -Xlinker -rpath=.

CXX=c++

CXXFLAGS=-Wall -Wextra -pedantic -Wno-unused-parameter -O $(OSXFLAGS)

all: single
single: single-user $(PROGRAM) prepare
console: single-user nogui $(PROGRAM)_con prepare
multi: multi-user $(PROGRAM)
multiconsole: multi-user nogui $(PROGRAM)_con

single-user:
	echo "/* File generated by Make. */" > config.h
	echo "#define DATADIR \"user\"" >> config.h
	echo "#define USERDIR \"user\"" >> config.h
	echo "#define SCOREDIR \"user\"" >> config.h

multi-user:
	echo "/* File generated by Make. */" > config.h
	echo "#define DATADIR \"$(DATADIR)\"" >> config.h
	echo "#define USERDIR \"$(USERDIR)\"" >> config.h
	echo "#define SCOREDIR \"$(SCOREDIR)\"" >> config.h

install:
	mkdir -p $(BINDIR)
	cp $(PROGRAM) $(BINDIR)
	mkdir -p $(MANDIR)
	cp docs/man_page $(MANDIR)/$(PROGRAM).6
	mkdir -p $(DATADIR)
	cp help/* $(DATADIR)
	cp data/* $(DATADIR)
	chown $(GAMEOWNER) $(DATADIR)
	mkdir -p $(SCOREDIR)
	touch $(SCOREDIR)/logfile.txt
	touch $(SCOREDIR)/highscores.dat
	chown -R $(GAMEOWNER) $(SCOREDIR)
	chmod -R 775 $(SCOREDIR)
	gzip $(MANDIR)/$(PROGRAM).6

uninstall:
	rm $(BINDIR)/$(PROGRAM)
	rm $(MANDIR)/$(PROGRAM).6.gz
	rm $(SCOREDIR)/logfile.txt
	rm $(SCOREDIR)/highscores.dat
	rmdir --ignore-fail-on-non-empty $(SCOREDIR)
	rm $(DATADIR)/*
	rmdir --ignore-fail-on-non-empty $(DATADIR)

prepare:
	strip $(PROGRAM)
	mkdir -p build
	mkdir -p build/$(PROGRAM)
	mkdir -p build/$(PROGRAM)/user
	mkdir -p build/$(PROGRAM)/shot
	cp $(PROGRAM) build/$(PROGRAM)/
#	cp docs/Guide.txt docs/Credits.txt build/$(PROGRAM)
	cp config.lua libnoteye.so build/$(PROGRAM)
	cp -r lua gfx build/$(PROGRAM)
	cp help/* build/$(PROGRAM)/user
	cp data/* build/$(PROGRAM)/user

$(PROGRAM): config.h libnoteye.so $(GENFILES) $(OBJS) $(NEOBJS)
	c++ -g -o $(PROGRAM) $(LDFLAGS) $(NELDFLAGS) $(OBJS) $(NEOBJS) $(NELIBS)

nogui:
	echo "#define NOGUI" >> config.h

$(PROGRAM)_con: config.h $(GENFILES) $(OBJS)
	c++ -g -o $(PROGRAM)_con $(LDFLAGS) $(OBJS) $(LIBS)

clean:
	rm -f $(PROGRAM) *.o core

cleaner: clean
	rm -f support/encyclopedia2c noteye/libnoteye.o libnoteye.so
	cd support/tablemaker && $(MAKE) clean

cleangen:
	rm -f $(GENFILES)

Attack.h Attack.cpp: Attacks.txt
	$(MAKE) support/tablemaker/tablemaker
	m4 < Attacks.txt | support/tablemaker/tablemaker
Flavor.h Flavor.cpp: Flavor.txt
	$(MAKE) support/tablemaker/tablemaker
	m4 < Flavor.txt | support/tablemaker/tablemaker
MonsterIlk.h MonsterIlk.cpp: Monsters.txt
	$(MAKE) support/tablemaker/tablemaker
	m4 < Monsters.txt | support/tablemaker/tablemaker
ObjectIlk.h ObjectIlk.cpp: Items.txt
	$(MAKE) support/tablemaker/tablemaker
	support/tablemaker/tablemaker < Items.txt
AttackType.o: Attack.h Attack.cpp
Monster.o: MonsterIlk.h MonsterIlk.cpp
Object.o: Flavor.h Flavor.cpp ObjectIlk.h ObjectIlk.cpp
Lore.h Lore.cpp: Lore.txt
	$(MAKE) support/encyclopedia2c
	support/encyclopedia2c Lore.txt
support/encyclopedia2c: support/encyclopedia2c.cpp
	$(CXX) support/encyclopedia2c.cpp -o support/encyclopedia2c
support/tablemaker/tablemaker:
	cd support/tablemaker && $(MAKE)
libnoteye.so:
	cd noteye && $(MAKE)
